-title = h(question.title)
-if question.closed
  -title += " [#{t("closed", :scope => "activerecord.attributes.question").upcase}]"

-if !local_assigns[:mini]
  -owner = nil
  - if question.last_target_id.present?
    - last_target_id = question.last_target_id
    - last_target_date = question.last_target_date || question.updated_at
    - owner = question.last_target_user
  -else
    - last_target = question
    - last_target_date = question.updated_at
    - owner = question.user unless question.anonymous

  %article{:class => class_for_question(question)}
    -cache("question_on_index_#{question.id}_#{I18n.locale}") do
      %h2
        -if question.wiki
          = link_to "Wiki: #{title}", question_path(question), :title => truncate(strip_tags(question.body), :length => 200)
        -else
          = link_to title, question_path(question), :title => truncate(strip_tags(question.body), :length => 200)
    .user-data
      -if owner
        =render :partial => "users/user_data", :locals => {:user => owner}
      -else
        #{t 'questions.question.from'}
        =t("global.anonymous")
        %time{:pubdate => "pubdate", :datetime => last_target_date.iso8601}
          = link_to t("time.ago", :time => time_ago_in_words(last_target_date)), question_path(question, :anchor => last_target_id)


    .tags
      -if question.tags.empty? && logged_in? && (current_user.can_modify?(@question) || current_user.can_retag_others_questions_on?(current_group))
      %ul
        %li
          #{t 'questions.tags.title'}
        -question.first_tags.each do |tag|
          %li{:class => "tag_#{h(tag)}"}
            = tag_link(tag)
        %li
          = link_to t('questions.show.retag'), retag_question_path(question), :id => 'retag', :class => "retag"
      .clear

    .toolbar
      %ul
        %li.answers
          = link_to t('.answers_number', :quantity => format_number(question.answers_count)), question_path(question)
        
        -if question.followers_count.to_i > 0
          %li.followers
            = "#{format_number(question.followers_count)} #{t '.followers'}"

        %li.votes
          -unless question.closed
            -if logged_in? && (vote = current_user.vote_on(question))
              -if vote < 0
                = image_tag "edit-delete.png"
              -else
                = image_tag "dialog-ok-apply.png"
            -elsif current_user != question.user
              = form_tag question_votes_path(question), :class => "vote-up-form" do
                .fields
                  = hidden_field_tag "source", questions_path, :id =>  "source_#{question.id}"
                  = image_submit_tag("dialog-ok.png", :name=>"vote_up", :value=>"1", :title => t("votes.control.to_vote_up"), :class => "quick-vote-button")
          = link_to "#{format_number(question.votes_average)} #{t(:votes, :scope => "activerecord.attributes.question")}"
        -if !logged_in? || (current_user != question.user && current_user.has_flagged?(question).nil?)
          %li.spam
            = link_to t(".flag", :default => :"questions.show.flag"), new_question_flag_path(question), :class => "flag-link-index", :rel => 'nofollow'

        %li
          -if !logged_in? || !question.follower?(current_user)
            =link_to "#{t '.continue'}", follow_question_path(question)

        %li
          =link_to "#{t '.answer'}", question_path(question, :anchor => "to_answer")

    .clear

-else
  -cache("mini_question_on_index_#{question.id}_#{I18n.locale}") do
    %article{:class => "#{class_for_question(question)} #{local_assigns[:lite] ? 'lite' : ''}"}

      %h3
        = link_to title, question_path(question)

      .toolbar
        %ul
          %li.answers
            = link_to "#{format_number(question.answers_count)} #{t(:answers, :scope => "activerecord.attributes.question")}"
