-if !local_assigns[:mini]
  %article.comment
    %h4
      = avatar_img(comment.user, :size => "small")
      = link_to h(comment.user.login), user_path(comment.user), :class => "clear"
      %b
        = t("time.ago", :time => time_ago_in_words(comment.created_at))
        = t("global.from", :site => comment.user.country_name)
        = country_flag(comment.user.country_code, comment.user.country_name)

    .comment-content.markdown
      = shapado_auto_link(markdown(comment.body), :link_users => true)
    .controls
      .actions
        - if logged_in? && current_user != comment.user
          = link_to t("comments.shared.reply"), "#", :class => "addNestedAnswer reply", 'data-author' => comment.user.login
        -if logged_in? && (current_user.can_modify?(comment) || current_user.mod_of?(current_group))
          -case comment.commentable
            -when Question
              = link_to t("scaffold.edit"), edit_question_comment_path(:question_id => comment.commentable.id, :id => comment.id, :source => source), :class => "edit_comment"
            -when Answer
              = link_to t("scaffold.edit"), edit_question_answer_comment_path(:question_id => comment.commentable.question, :answer_id => comment.commentable, :id => comment.id, :source => source), :class => "edit_comment"
        -if logged_in? && comment.can_be_deleted_by?(current_user)
          -case comment.commentable
            -when Question
              = link_to t("scaffold.destroy"), question_comment_path(:question_id =>  comment.commentable.id, :id => comment.id, :source => source), :confirm => t("scaffold.sure", :model => "comment"), :method => :delete
            -when Answer
              = link_to t("scaffold.destroy"), question_answer_comment_path(:question_id =>  comment.commentable.question.id, :answer_id => comment.commentable.id, :id => comment.id, :source => source), :confirm => t("scaffold.sure", :model => "comment"), :method => :delete
    .clear

-else
  %article.comment
    .article-actions
      -if logged_in? && current_user.can_vote_up_on?(current_group) && current_user != comment.user
        %ul
          %li.votes
            = vote_box(comment, request.path, comment.find_question.closed)
    %h4
      = t("time.ago", :time => time_ago_in_words(comment.created_at))
      =link_to comment.user.login, user_path(comment.user)
      == #{t("comments.shared.said")}:

    .comment-content.markdown
      = shapado_auto_link(markdown(comment.body), :link_users => true)

    .controls
      .actions
        - if logged_in? && current_user != comment.user
          = link_to t("comments.shared.reply"), "#", :class => "addNestedAnswer reply", 'data-author' => comment.user.login
        -if logged_in? && (current_user.can_modify?(comment) || current_user.mod_of?(current_group))
          -case comment.commentable
            -when Question
              = link_to t("scaffold.edit"), edit_question_comment_path(:question_id => comment.commentable.id, :id => comment.id, :source => source), :class => "edit_comment"
            -when Answer
              = link_to t("scaffold.edit"), edit_question_answer_comment_path(:question_id => comment.commentable.question, :answer_id => comment.commentable, :id => comment.id, :source => source), :class => "edit_comment"
        -if logged_in? && comment.can_be_deleted_by?(current_user)
          -case comment.commentable
            -when Question
              = link_to t("scaffold.destroy"), question_comment_path(:question_id =>  comment.commentable.id, :id => comment.id, :source => source), :confirm => t("scaffold.sure", :model => "comment"), :method => :delete
            -when Answer
              = link_to t("scaffold.destroy"), question_answer_comment_path(:question_id =>  comment.commentable.question.id, :answer_id => comment.commentable.id, :id => comment.id, :source => source), :confirm => t("scaffold.sure", :model => "comment"), :method => :delete
    .clear

